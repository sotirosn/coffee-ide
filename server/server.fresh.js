// Generated by CoffeeScript 1.3.3
(function() {
  var Application, Routine, app, codemirrordir, getpostdata, http, io, log, run,
    __slice = [].slice;

  log = console.log.bind(console);

  io = require('socket.io');

  http = require('express');

  log(process.argv);

  Routine = (function() {

    function Routine(name, iterator, onerror) {
      this.name = name;
      this.iterator = iterator;
      this.onerror = onerror != null ? onerror : function(error) {
        throw error;
      };
    }

    Routine.prototype.next = function(value) {
      var _this = this;
      try {
        this.resume(value);
      } catch (exception) {
        this.onerror(exception);
      }
      return function(end) {
        _this.end = end;
        if (_this.name) {
          return log("" + _this.name + " waiting on -> " + (_this.end.name || _this.end));
        }
      };
    };

    Routine.prototype["throw"] = function(exception) {
      try {
        return this.iterator["throw"](exception);
      } catch (exception) {
        return this.onerror(exception);
      }
    };

    Routine.prototype.resume = function(value) {
      var next;
      next = this.iterator.next(value);
      if (!next.done) {
        if (this.name) {
          log("resuming " + this.name);
        }
        return next.value(this);
      } else if (this.end != null) {
        if (this.name) {
          log("finished " + this.name);
        }
        return this.end.resume(next.value);
      }
    };

    return Routine;

  })();

  run = function(routine, name) {
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (name) {
        log("running " + name);
      }
      return (new Routine(name, routine.apply(null, args), args[2])).next();
    };
  };

  Application = (function() {

    Application.prototype.fs = require('fs');

    Application.prototype.pm = require('child_process');

    Application.prototype.processes = {};

    function Application(mountpoints) {
      this.mountpoints = mountpoints != null ? mountpoints : {};
      this.readfile = this.readfile.bind(this);
      this.listdir = this.listdir.bind(this);
    }

    Application.prototype.readfile = function(path) {
      var _this = this;
      return function(wait) {
        return _this.fs.readFile(path, {
          encoding: 'utf8'
        }, function(error, data) {
          if (error != null) {
            return wait["throw"](error);
          }
          return wait.next(data);
        });
      };
    };

    Application.prototype.writefile = function(path, data) {
      var _this = this;
      return function(wait) {
        return _this.fs.writeFile(path, data, function(error, data) {
          if (error != null) {
            return wait["throw"](error);
          }
          return wait.next();
        });
      };
    };

    Application.prototype.listdir = function(path) {
      var _this = this;
      return function(wait) {
        return _this.fs.readdir(path, function(error, data) {
          if (error != null) {
            return wait["throw"](error);
          }
          return wait.next(data);
        });
      };
    };

    Application.prototype.mkdir = function(path) {
      var _this = this;
      return function(wait) {
        return _this.fs.mkdir(path, function(error) {
          if (error != null) {
            return wait["throw"](error);
          }
          return wait.next();
        });
      };
    };

    Application.prototype.statfile = function*(path) {
      var exists,
        _this = this;
      exists = yield function(wait) {
        return _this.fs.exists(path, function(result) {
          return wait.next(result);
        });
      };
      if (!exists) {
        return false;
      }
      return yield function(wait) {
        return _this.fs.stat(path, function(error, stats) {
          if (error != null) {
            return wait["throw"](error);
          }
          return wait.next(stats);
        });
      };
    };

    Application.prototype["delete"] = function(path) {};

    Application.prototype.rename = function(path, name) {
      var _this = this;
      return function(wait) {
        var newpath;
        newpath = path.replace(/([^/])+$/, name);
        return _this.fs.rename(path, newpath, function(error) {
          if (error != null) {
            return wait["throw"](error);
          }
          return wait.next();
        });
      };
    };

    Application.prototype.exec = function(path, command) {
      var _this = this;
      log("/> cd " + path + " && " + command);
      return function(wait) {
        return _this.pm.exec("cd " + path + " && " + command, function(error, stdout, stderr) {
          if (error != null) {
            return wait["throw"](error);
          }
          return wait.next([stdout, stderr]);
        });
      };
    };

    Application.prototype.run = function(path, command) {
      var child;
      child = this.pm.spawn('cmd', ['/C', "cd " + path + " && call ./" + command]);
      this.processes[child.pid] = child;
      return child.pid;
    };

    Application.prototype.connect = function(connection, pid) {
      var child,
        _this = this;
      child = this.processes[pid];
      if (!(child != null)) {
        connection.emit('stderr', "pid (" + pid + ") not found!");
        connection.disconnect();
        return;
      }
      child.stdout.on('data', function(data) {
        return connection.emit('stdout', data.toString());
      });
      child.stderr.on('data', function(data) {
        return connection.emit('stderr', data.toString());
      });
      child.on('close', function(exitcode) {
        log("closed (" + pid + ") " + exitcode);
        if (exitcode !== 0) {
          connection.emit('stderr', "exitcode: " + exitcode);
        }
        connection.disconnect();
        return delete _this.processes[pid];
      });
      return connection.on('disconnect', function() {
        log("killing task (" + pid + ")");
        return _this.pm.exec("taskkill /PID " + pid + " /T /F");
      });
    };

    Application.prototype.getpath = function(path) {
      var base, _ref;
      path = path.split('/');
      _ref = [path.splice(0, 1)[0], path.join('/')], base = _ref[0], path = _ref[1];
      if (base === '') {
        return ['.', path];
      }
      if (!(this.mountpoints[base] != null)) {
        throw "basepath not found: " + base;
      }
      return [this.mountpoints[base], path];
    };

    Application.prototype.getcommandpath = function(path) {
      var base, _ref;
      path = path.split(' ');
      _ref = [path.splice(0, 1)[0], path.join(' ')], base = _ref[0], path = _ref[1];
      if (base === '') {
        return ['.', path];
      }
      if (!(this.mountpoints[base] != null)) {
        throw "basepath not found: " + base;
      }
      return [this.mountpoints[base], path];
    };

    Application.prototype.getsitepath = function(path) {
      var base, _ref;
      path = path.split('/');
      _ref = [path.splice(0, 1)[0], path.join('/')], base = _ref[0], path = _ref[1];
      if (!(this.sitepaths[base] != null)) {
        throw "sitepath not found: " + base;
      }
      return [this.sitepaths[base], path].join('/');
    };

    Application.prototype.addProject = function(project) {
      return this.mountpoints[project.name] = project.path;
    };

    return Application;

  })();

  app = new Application;

  /*
  do run ->
  	data = yield app.readfile './config.js'
  	(eval data) app
  */


  (require(process.cwd() + '/config.coffee'))(app);

  getpostdata = function(request) {
    return function(wait) {
      var data;
      data = '';
      request.on('data', function(chunck) {
        data += chunck;
        if (data.length > 1e6) {
          request.connection.close();
          return wait["throw"]("POST data too large!");
        }
      });
      return request.on('end', function(chunck) {
        return wait.next(data);
      });
    };
  };

  codemirrordir = '/Users/Games/Documents/GitHub/CodeMirror/';

  http().get('/', function(request, response) {
    return response.sendfile('client/index.html');
  }).get('/codemirror/*', function(request, response) {
    return response.sendfile(codemirrordir + request.params[0]);
  }).get('/site/*', function(request, response) {
    var sitepath;
    log(request.url);
    sitepath = app.getsitepath(request.params[0]);
    return response.sendfile(sitepath);
  }).get('/*', function(request, response) {
    return response.sendfile('client/' + request.params[0]);
  }).listen(process.argv[2] || 8080);

  http().use(function(request, response, next) {
    log(request.url);
    response.set('Access-Control-Allow-Origin', 'http://localhost:8080');
    return next();
  }).get('/listdir/*', run(function*(request, response) {
    var dirpath, filelist, filename, results, stats, _i, _len;
    dirpath = (app.getpath(request.params[0])).join('/');
    log("listing files in: " + dirpath);
    filelist = yield app.listdir(dirpath);
    results = {};
    for (_i = 0, _len = filelist.length; _i < _len; _i++) {
      filename = filelist[_i];
      stats = app.fs.statSync(dirpath + '/' + filename);
      if (stats.isDirectory()) {
        results[filename] = 'dir';
      } else if (stats.isFile()) {
        results[filename] = 'file';
      }
    }
    return response.json(results);
  })).get('/listdir', function(request, response) {
    log(Object.keys(app.mountpoints));
    return response.json(Object.keys(app.mountpoints));
  }).get('/readfile/*', run(function*(request, response) {
    var filedata, filepath;
    filepath = (app.getpath(request.params[0])).join('/');
    log("reading from: " + filepath);
    filedata = yield app.readfile(filepath);
    return response.json(filedata);
  })).post('/writefile/*', run(function*(request, response) {
    var basepath, filepath, postdata, stderr, stdout, _ref, _ref1;
    _ref = app.getpath(request.params[0]), basepath = _ref[0], filepath = _ref[1];
    postdata = yield getpostdata(request);
    log("writing to: " + basepath + "/" + filepath);
    yield app.writefile("" + basepath + "/" + filepath, postdata);
    log((_ref1 = yield app.exec(basepath, "cake -f " + filepath + " files:onwrite"), stdout = _ref1[0], stderr = _ref1[1], _ref1));
    return response.json([stdout, stderr]);
  })).get('/mkdir/*', run(function*(request, response) {
    var dirpath;
    dirpath = (app.getpath(request.params[0])).join('/');
    log("mkdir: " + dirpath);
    yield app.mkdir(dirpath);
    return response.json('ok');
  })).get('/rename/*', run(function*(request, response) {
    var name, path;
    path = (app.getpath(request.params[0])).join('/');
    name = request.query.name;
    log("rename: " + path + " -> " + name);
    yield app.rename(path, name);
    return response.json('ok');
  })).get('/delete/*', run(function*(request, response) {
    var path;
    path = (app.getpath(request.params[0])).join('/');
    log("delete: " + path);
    yield app["delete"](path);
    return response.json('ok');
  })).get('/exec/*', run(function*(request, response) {
    var command, path, stderr, stdout, _ref, _ref1;
    log("command:", (_ref = app.getcommandpath(request.params[0]), path = _ref[0], command = _ref[1], _ref));
    _ref1 = yield app.exec(path, command), stdout = _ref1[0], stderr = _ref1[1];
    return response.json([stdout, stderr]);
  })).get('/run/*/*', function(request, response) {
    var command, path;
    log("path: ", path = app.resolvepath([request.params[0]]));
    log("command: " + (command = request.params[1]));
    return response.json(app.run(path, command));
  }).listen(process.argv[3] || 8090);

  (io.listen(process.argv[4] || 9000)).on('connection', function(connection) {
    var pid;
    pid = connection.handshake.query.pid;
    return app.connect(connection, pid);
  });

}).call(this);
