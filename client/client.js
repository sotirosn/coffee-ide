// Generated by CoffeeScript 1.3.3
(function() {
  var $, BaseClass, Editor, Hierarchy, HttpDataSource, IDE, datasource, html, ide, log, run,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  console.clear();

  log = console.log.bind(console);

  html = document.createElement.bind(document);

  $ = document.querySelector.bind(document);

  datasource = null;

  ide = null;

  run = function() {
    var args, routine;
    routine = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    routine = routine({
      next: function(value) {
        return routine.next.apply(routine, [value].concat(__slice.call(args)));
      }
    });
    return routine.next();
  };

  BaseClass = (function() {

    function BaseClass() {}

    BaseClass.property = function(name, property) {
      return Object.defineProperty(this.prototype, name, property);
    };

    return BaseClass;

  })();

  HttpDataSource = (function() {

    function HttpDataSource(host) {
      this.host = host;
    }

    HttpDataSource.prototype.get = function(routine, path, data) {
      var request, url;
      url = this.host + path + this.encode(data);
      request = new XMLHttpRequest;
      request.open('GET', url);
      request.onreadystatechange = function() {
        if (request.readyState === 4) {
          if (request.status === 200) {
            return routine != null ? routine.next(JSON.parse(request.responseText)) : void 0;
          } else {
            return console.error("Server Error:", request.responseText);
          }
        }
      };
      return request.send();
    };

    HttpDataSource.prototype.post = function(routine, path, data, value) {
      var request, url;
      url = this.host + path + this.encode(data);
      request = new XMLHttpRequest;
      request.open('POST', url);
      request.onreadystatechange = function() {
        if (request.readyState === 4) {
          if (request.status === 200) {
            return routine != null ? routine.next(JSON.parse(request.responseText)) : void 0;
          } else {
            return console.error("Server Error:", request.responseText);
          }
        }
      };
      return request.send(value);
    };

    HttpDataSource.prototype.encode = function(data) {
      var key, next, result, value;
      result = '';
      next = '?';
      for (key in data) {
        value = data[key];
        result += next + encodeURI(key + '=' + encodeURI(value));
        next = '&';
      }
      return result;
    };

    return HttpDataSource;

  })();

  Hierarchy = (function() {

    function Hierarchy() {
      this.ui = {
        hierarchy: $('#hierarchy')
      };
      this.load = this.load.bind(this);
    }

    Hierarchy.prototype.createElement = function(id, type) {
      var element;
      element = new Hierarchy.Element(id, type);
      return this.ui.hierarchy.appendChild(element.ui.element);
    };

    Hierarchy.prototype.load = function*(routine) {
      var elements, id, type;
      elements = yield datasource.get(routine, '/list');
      for (id in elements) {
        type = elements[id];
        this.createElement(id, type);
      }
      return $('#content').style.left = (this.ui.hierarchy.offsetWidth + 15) + 'px';
    };

    return Hierarchy;

  })();

  Hierarchy.Element = (function() {

    function Element(id, type) {
      this.id = id;
      this.type = type;
      this.ui = {
        element: html('element'),
        label: html('label')
      };
      this.ui.label.innerHTML = id;
      this.ui.element.appendChild(this.ui.label);
      this.ui.element.onclick = this.click.bind(this);
    }

    Element.prototype.click = function(event) {
      var _this = this;
      if (!(this.editor != null)) {
        this.editor = ide.createEditor(this.id, this.type);
        this.editor.onclose = this.onclose.bind(this);
        run(function*(routine) {
          return _this.editor.value = yield datasource.get(routine, '/element/read', {
            id: _this.id,
            type: _this.type
          });
        });
      }
      return this.editor.activate();
    };

    Element.prototype.onclose = function() {
      return delete this.editor;
    };

    return Element;

  })();

  IDE = (function() {

    function IDE() {
      var ui;
      ui = this.ui = {
        tabs: $('#tabs'),
        windows: $('#windows')
      };
      this.editors = [];
      this.editors.active = null;
      this.editors.add = function(editor) {
        this.push(editor);
        ui.tabs.appendChild(editor.ui.tab);
        return ui.windows.appendChild(editor.ui.window);
      };
      this.editors.remove = function(editor) {
        this.splice(this.indexOf(editor, 1));
        if (this.active === this) {
          if (this.length > 0) {
            this[0].activate();
          } else {
            this.active = null;
          }
        }
        ui.tabs.removeChild(editor.ui.tab);
        return ui.windows.removeChild(editor.ui.window);
      };
    }

    IDE.prototype.createEditor = function(name, type) {
      var editor;
      editor = new (Editor[type] || Editor)(name, this.editors);
      return editor;
    };

    return IDE;

  })();

  Editor = (function(_super) {

    __extends(Editor, _super);

    function Editor(name, container, window) {
      this.container = container;
      this.ui = {
        tab: html('tab'),
        label: html('label'),
        close: html('close'),
        window: window || html('textarea')
      };
      this.ui.label.innerHTML = name;
      this.ui.close.innerHTML = 'x';
      this.ui.close.onclick = this.close.bind(this);
      this.ui.tab.appendChild(this.ui.label);
      this.ui.tab.appendChild(this.ui.close);
      this.ui.tab.onclick = this.activate.bind(this);
      this.container.add(this);
    }

    Editor.prototype.close = function(event) {
      this.container.remove(this);
      event.stopPropagation();
      event.preventDefault();
      if (typeof this.onclose === "function") {
        this.onclose();
      }
      return false;
    };

    Editor.prototype.activate = function() {
      log('activating');
      if (this.container.active === this) {
        return;
      }
      if (this.container.active != null) {
        this.container.active.inactivate();
      }
      this.container.active = this;
      this.ui.tab.className = 'active';
      return this.ui.window.removeAttribute('hidden');
    };

    Editor.prototype.inactivate = function() {
      this.ui.tab.className = 'inactive';
      return this.ui.window.setAttribute('hidden', true);
    };

    Editor.property('name', {
      set: function(value) {
        return this.ui.label.innerHTML = value;
      }
    });

    Editor.property('value', {
      set: function(value) {
        return this.ui.window.value = value;
      },
      get: function() {
        return this.ui.window.value;
      }
    });

    return Editor;

  })(BaseClass);

  Editor.coffee = (function(_super) {

    __extends(coffee, _super);

    function coffee(id, container) {
      var initialize, window,
        _this = this;
      this.id = id;
      log("new coffee editor");
      window = null;
      this.codemirror = new CodeMirror((function(element) {
        return window = element;
      }), {
        mode: 'coffeescript',
        lineNumbers: true,
        indentUnit: 4,
        smartIndent: true,
        tabSize: 4,
        electricChars: true,
        autofocus: true
      });
      this.codemirror.on('change', initialize = function(value) {
        _this.codemirror.off('change', initialize);
        _this.codemirror.on('change', _this.autosave.bind(_this));
        return _this.codemirror.focus();
      });
      coffee.__super__.constructor.call(this, id, container, window);
      this.codemirror.refresh();
    }

    coffee.property('value', {
      set: function(value) {
        return this.codemirror.setValue(value);
      },
      get: function() {
        return this.codemirror.value;
      }
    });

    coffee.prototype.activate = function() {
      coffee.__super__.activate.call(this);
      return this.codemirror.refresh();
    };

    coffee.prototype.autosaveDelay = 30000;

    coffee.prototype.autosave = function() {
      var _this = this;
      if (this.autosaving) {
        return;
      }
      this.name = this.id + "*";
      log("autosaving..");
      return this.autosaving = setTimeout((function() {
        _this.autosave = false;
        return _this.save();
      }), this.autosaveDelay);
    };

    coffee.prototype.save = function() {
      var _this = this;
      if (this.autosaving) {
        clearTimeout(this.autosaving);
      }
      this.autosaving = false;
      return run(function*(routine) {
        var status;
        status = yield datasource.post(routine, '/element/write', {
          id: _this.id
        }, _this.codemirror.getValue());
        _this.name = _this.id;
        return log(status);
      });
    };

    coffee.prototype.close = function(event) {
      if (this.autosaving) {
        this.save();
      }
      return coffee.__super__.close.call(this, event);
    };

    return coffee;

  })(Editor);

  this.load = function() {
    var hierarchy;
    datasource = new HttpDataSource('http://localhost:8080');
    ide = new IDE;
    hierarchy = new Hierarchy;
    return run(hierarchy.load);
  };

  this.source = function() {
    return run(function(routine) {
      return datasource.read(routine, '/element/read', {
        read: read
      });
    });
  };

}).call(this);
